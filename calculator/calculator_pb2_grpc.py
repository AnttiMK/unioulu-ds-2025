# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc  # Import the gRPC framework
import warnings  # For displaying warnings about version compatibility

# Import the auto-generated protobuf message classes
import calculator_pb2 as calculator__pb2

# Version compatibility check
GRPC_GENERATED_VERSION = '1.69.0'  # Version of gRPC used to generate this code
GRPC_VERSION = grpc.__version__  # Current installed gRPC version
_version_not_supported = False

try:
    # Check if the installed gRPC version is compatible with the generated code
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    # If the utility function isn't available, assume incompatibility
    _version_not_supported = True

# Raise exception if version incompatibility detected
if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in calculator_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CalculatorStub(object):
    """Client-side interface for the Calculator service.
    
    This stub provides methods that call the RPC endpoints defined in calculator.proto.
    """

    def __init__(self, channel):
        """Constructor for the client stub.

        Args:
            channel: A gRPC channel connected to the server.
        """
        # Define the Add RPC method for client-side use
        self.Add = channel.unary_unary(
                '/Calculator/Add',  # Full method name
                request_serializer=calculator__pb2.AddRequest.SerializeToString,  # Convert request to bytes
                response_deserializer=calculator__pb2.AddResponse.FromString,  # Convert response from bytes
                _registered_method=True)  # Indicates the method is registered with service reflection


class CalculatorServicer(object):
    """Server-side implementation interface for the Calculator service.
    
    Classes that implement this interface can be registered with a gRPC server.
    """

    def Add(self, request, context):
        """Implementation of the Add RPC method.
        
        Args:
            request: The AddRequest message containing num1 and num2.
            context: The gRPC ServicerContext for the RPC call.
            
        Returns:
            An AddResponse message with the addition result.
        """
        # Default implementation that will be overridden by actual servicers
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)  # Set status code for unimplemented methods
        context.set_details('Method not implemented!')  # Add error details
        raise NotImplementedError('Method not implemented!')  # Raise exception


def add_CalculatorServicer_to_server(servicer, server):
    """Register a CalculatorServicer instance with a gRPC server.
    
    This function adds the servicer methods to the server's handler registry.
    
    Args:
        servicer: A CalculatorServicer instance that implements the RPC methods.
        server: A grpc.Server instance where the servicer will be registered.
    """
    # Define RPC method handlers for the server
    rpc_method_handlers = {
            'Add': grpc.unary_unary_rpc_method_handler(
                    servicer.Add,  # The method that will handle Add requests
                    request_deserializer=calculator__pb2.AddRequest.FromString,  # Convert incoming bytes to request object
                    response_serializer=calculator__pb2.AddResponse.SerializeToString,  # Convert response object to bytes
            ),
    }
    # Create a generic handler for the Calculator service
    generic_handler = grpc.method_handlers_generic_handler(
            'Calculator', rpc_method_handlers)  # Register handlers with service name
    server.add_generic_rpc_handlers((generic_handler,))  # Add the handler to the server
    server.add_registered_method_handlers('Calculator', rpc_method_handlers)  # Register for service reflection


 # This class is part of an EXPERIMENTAL API.
class Calculator(object):
    """Static interface for making RPC calls directly without creating a stub.
    
    This class is part of gRPC's experimental API and may change in future versions.
    """

    @staticmethod
    def Add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        """Static method to directly make an Add RPC call.
        
        Args:
            request: The AddRequest message.
            target: Server address in the format 'hostname:port'.
            options: Channel options.
            channel_credentials: Channel credentials for secure connections.
            call_credentials: Call credentials for authentication.
            insecure: If True, use insecure channel.
            compression: Compression algorithm to use.
            wait_for_ready: If True, wait for the channel to be ready.
            timeout: RPC timeout in seconds.
            metadata: Additional metadata to send with the request.
            
        Returns:
            The AddResponse message from the server.
        """
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Calculator/Add',  # Full method name
            calculator__pb2.AddRequest.SerializeToString,  # Convert request to bytes
            calculator__pb2.AddResponse.FromString,  # Convert response from bytes
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)  # Indicates the method is registered with service reflection
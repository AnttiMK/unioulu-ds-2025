services:
  client:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.client
    container_name: calculator_client
    environment:
      - GRPC_SERVER_URL=server:50051
    volumes:
      - ./certs:/app/certs:ro  # Mount certificates
    depends_on:
      - server

  consumer:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.consumer
    container_name: calculator_consumer
    environment:
      - MONGODB_URL=mongodb://admin:password@mongodb:27017
      - KAFKA_BROKER_URL=kafka:9092
      - FASTAPI_SERVER=https://fastapi_app:8000  # Changed to HTTPS
      - SERVICE_API_KEY=${CALCULATOR_CONSUMER_API_KEY}
    volumes:
      - ./certs:/app/certs:ro  # Mount certificates
    depends_on:
      - kafka

  server:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.server
    container_name: calculator_server
    ports:
      - "50051:50051"
      - "8001:8001"
    environment:
      - KAFKA_BROKER_URL=kafka:9092
      - FASTAPI_SERVER=https://fastapi_app:8000  # Changed to HTTPS
      - SERVICE_API_KEY=${CALCULATOR_SERVER_API_KEY}
    volumes:
      - ./certs:/app/certs:ro  # Mount certificates
    depends_on:
      - kafka
      
  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '2181:2181'

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OPTS: "-javaagent:/etc/kafka/jmx_prometheus_javaagent.jar=8080:/etc/kafka/jmx-exporter-config.yml"
    ports:
      - '9092:9092'
      - '8080:8080'  # JMX Exporter port
    volumes:
      - ./jmx_prometheus_javaagent.jar:/etc/kafka/jmx_prometheus_javaagent.jar
      - ./jmx-exporter-config.yml:/etc/kafka/jmx-exporter-config.yml

  mongodb:
    image: mongo:latest
    restart: always
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongodb

  fastapi:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.mongodb
    container_name: fastapi_app
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://admin:password@mongodb:27017
      - CALCULATOR_CONSUMER_API_KEY=${CALCULATOR_CONSUMER_API_KEY}
      - CALCULATOR_SERVER_API_KEY=${CALCULATOR_SERVER_API_KEY}
    volumes:
      - ./policy_engine.py:/app/policy_engine.py
      - ./certs:/app/certs:ro  # Mount certificates
    depends_on:
      - mongodb
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --ssl-keyfile /app/certs/key.pem --ssl-certfile /app/certs/cert.pem

  locust:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.locust
    ports:
      - "8089:8089"
    environment:
      - GRPC_SERVER_URL=server:50051
      - SERVICE_API_KEY=${CALCULATOR_CONSUMER_API_KEY}
      - PYTHONUNBUFFERED=1  # Add this for better logging
    volumes:
      - ./certs:/app/certs:ro  # Mount certificates
      - ./locustfile.py:/app/locustfile.py  # Mount locust file directly
    depends_on:
      - fastapi
      - server
    command: --host https://fastapi:8000  # Changed to HTTPS

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml 
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana

  aiagent:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.aiagent
    container_name: aiagent
    ports:
      - "8005:8005"

  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    command: ["--kafka.server=kafka:9092"]
    ports:
      - 9308:9308
      
volumes:
  mongo-data:
  grafana-storage: